x-service-config: &service-config
  depends_on:
    db:
      condition: service_healthy
  networks:
    - pakoski_net

services:
  db:
    image: postgres:15
    environment:
      - POSTGRES_DATABASE=main
      - POSTGRES_PASSWORD=password
    ports:
      - 5432:5432
    volumes:
      - ./dev/init_db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - pakoski_net

  teamservice:
    container_name: teamservice
    build: ./teamservice
    environment:
      - ROOT_PATH=/team
      - DATABASE_URL=postgres://postgres:password@db:5432/teamservice
      - USER_SERVICE_URL=http://userservice:8000/internal
      - USER_SERVICE_API_KEY=apikey
      - HACKATHON_SERVICE_URL=http://hackathonservice:8000/internal
      - HACKATHON_SERVICE_API_KEY=apikey
      - JWT_SECRET=dstu
      - INTERNAL_API_KEY=apikey
    <<: *service-config

  userservice:
    container_name: userservice
    build: ./userservice
    environment:
      - ROOT_PATH=/user
      - DATABASE_URL=postgres://postgres:password@db:5432/userservice
      - JWT_SECRET=dstu
      - INTERNAL_API_KEY=apikey
      - AVATAR_PATH=/uploads/avatars/
    volumes:
      - ./dev/local/:/uploads/avatars/
    <<: *service-config

  hackathonservice:
    container_name: hackathonservice
    build: ./hackathonservice
    environment:
      - ROOT_PATH=/hackathon
      - DATABASE_URL=postgres://postgres:password@db:5432/hackathonservice
      - JWT_SECRET=dstu
      - TEAM_SERVICE_URL=http://teamservice:8000/internal
      - TEAM_SERVICE_API_KEY=apikey
      - INTERNAL_API_KEY=apikey
    <<: *service-config

  chatservice:
    container_name: chatservice
    build: ./chatservice
    environment:
      - ROOT_PATH=/chat
      - DATABASE_URL=postgres://postgres:password@db:5432/chatservice
      - JWT_SECRET=dstu
    <<: *service-config

  s3:
    image: minio/minio
    container_name: s3
    ports:
      # Привет, я devoops, и ты SPA-приложение!
      # Вместо того что бы ожидать установку в корне домена, почему бы тебе искать ассеты относительно пути, ты жирный фронт.
      # Вы видите SPA не могут быть отрендерены потому что они проксированы не в рут
      # Чертовски ненавижу ебаных фронтэндеров, все что они делают, это требуют свою жареный nextjs, ебаный bloat, хештег убить всех фронтэндеров пусть горят тоже.
      # Если вы относитесь к одному из этих типов React Vue, Angular а особенно Nextjs, вам следует. Ты должен срочно убить себя немедленно ты ебаный нигер.

      # Был один фронтэндер, который посмотрел на меня на секунду очевидно пытаясь напасть на мое достоинство, так что в ответ я вытащил SSR и уничтожил его обратно на поля, откуда он пришел.
      # Что эти ребята делают сегодня?
      # Проклятый бандл, сам себя не соберет.
      # Святые небеса, в старые добрые времена, если фронтэндер не мог организовать страницу на табличной разметке, в ответ он получал большую порку.
      # Я был так чертовски зол, когда пошел в доку nextjs, я даже спросил мейнтейнера, какого хуя нельзя в рантайме решать где приложение
      # Он выгнал меня, поэтому я не стал деплоить приложение, я как супергерой.
      # https://cdn.discordapp.com/attachments/411551392441040906/1305976312137257085/641209ec4ea790eb.mp4?ex=681fa7b8&is=681e5638&hm=afc2afa04c4928b415dac440ec32c9cbb33e8221c7e27a98a882ba00690338db&
      - 9001:9001
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - pakoski_net
    volumes:
      - minio_data:/data

  minio-mc:
    image: minio/mc
    entrypoint: /setup/entrypoint.sh
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
    depends_on:
      s3:
        condition: service_healthy
    volumes:
      - ./minio:/setup
    networks:
      - pakoski_net

  nginx:
    image: nginx:latest
    ports:
      - 80:80
    volumes:
      - ./dev/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dev/local/:/var/uploads/avatars/
    depends_on:
      - userservice
      - teamservice
      - hackathonservice
      - chatservice
      - s3
    networks:
      - pakoski_net

networks:
  pakoski_net:

volumes:
  minio_data: